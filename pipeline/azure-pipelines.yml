trigger:
  - main

variables:
  loadTestsScript: 'tests-contagem.js'
  testsDirectory: './src'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  namespaceTests: 'apicontagem-loadtests-$(Build.BuildId)'

stages:
- stage: Tests
  displayName: Tests stage
  jobs:
  - job: Tests
    displayName: Tests
    pool:
      vmImage: $(vmImageName)
    variables:
      - group: k6-kubernetes-apicontagem
    steps:
    - script: cat $(testsDirectory)/$(loadTestsScript)
      displayName: 'Exibir conteudo do script de testes antes dos replaces'
    - task: replacetokens@5
      inputs:
        targetFiles: '$(testsDirectory)/$(loadTestsScript)'
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true
      displayName: 'Atualizar script de testes com após replaces'
    - script: cat $(testsDirectory)/$(loadTestsScript)
      displayName: 'Exibir conteudo do script de testes apos replaces'
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aks-testes'
        command: 'login'
      displayName: 'Efetuar login no cluster'
    - script: kubectl get namespaces
      displayName: 'Exibir namespaces existentes'
    - script: |
        kubectl create namespace $(namespaceTests)
      displayName: 'Criar namespace para os testes'
    - script: |
        kubectl get namespaces
      displayName: 'Verificar se o namespace foi criado'
    - script: |
        cd $(testsDirectory)
        kubectl create configmap tests-contagem --from-file $(loadTestsScript) -n $(namespaceTests)
      displayName: 'Criar ConfigMap com o script de teste'
    - script: |
        cd $(testsDirectory)
        kubectl apply -f run-k6-apicontagem.yaml -n $(namespaceTests)
      displayName: 'Aplicar script de testes de carga iniciando o processamento'
    - script: sleep 240s
      displayName: 'Aguardar conclusão dos jobs de teste'
    - script: |
        echo "* Logs dos jobs de teste"
        kubectl get jobs -n $(namespaceTests)
        for job in $(kubectl get jobs -n $(namespaceTests) -o jsonpath='{.items[*].metadata.name}'); do
          echo
          echo
          echo
          echo "** Logs do job: $job"
          kubectl logs job/$job -n $(namespaceTests)
        done
      displayName: 'Obter logs dos jobs de teste'
    - script: |
        {
          echo "# Logs dos jobs de teste"
          kubectl get jobs -n $(namespaceTests)
          for job in $(kubectl get jobs -n $(namespaceTests) -o jsonpath='{.items[*].metadata.name}'); do
            echo
            echo
            echo
            echo "## Logs do job: $job"
            kubectl logs job/$job -n $(namespaceTests)
          done
        } > jobs-logs.md
      displayName: 'Obter logs dos jobs de teste e salvar em Markdown'
    - script: |
        kubectl delete namespace $(namespaceTests)
      displayName: 'Remover namespace de testes'
    - script: |
        pwd
        echo
        echo
        ls -l
      displayName: 'Verificar arquivos no diretório raiz'
    - task: PublishMarkdownReports@1
      inputs:
        contentPath: '$(Build.SourcesDirectory)'
        indexFile: 'jobs-logs.md'
      displayName: Publicar resultado no formato Markdown